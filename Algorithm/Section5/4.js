// 연속 부분수열 2

// N개의 수로 이루어진 수열이 주어집니다.
// 이 수열에서 연속부분수열의 합이 특정숫자 M이하가 되는 경우가 몇 번 있는지 구하는 프로그램을 작성하세요.
// 만약 N=5, M=5이고 수열이 다음과 같다면
// 1 3 1 2 3
// 합이 5이하가 되는 연속부분수열은 {1}, {3}, {1}, {2}, {3}, {1, 3}, {3, 1}, {1, 2}, {2, 3}, {1, 3, 1}로 총 10가지입니다.

// ▣ 입력설명
// 첫째 줄에 N(1≤N≤100,000), M(1≤M≤100,000,000)이 주어진다. 수열의 원소값은 1,000을 넘지 않는 자연수이다.

// ▣ 출력설명
// 첫째 줄에 경우의 수를 출력한다.

// ▣ 입력예제 1
// 5 5
// 1 3 1 2 3

// ▣ 출력예제 1
// 10

// 풀이 방법:

// 1. 어떤 로직을 짜야 될까?
// [1]
// [1, 3], [3]
// [1, 3, 1], [3, 1], [1]
// [1, 3, 1, 2] !X
// [3, 1, 2] !X
// [1, 2] [2]
// [1, 2, 3] !X
// [2, 3], [3]
// 총 10개

// 2. 갯수는 어떻게 구해야 될까?
// [1,3,1]일 경우 마지막 요소인 1인 들어가는 경우가 몇가지인지 생각해보자
// [1,3,1], [3,1], [1] 총 3가지이다.
// [1, 3, 1, 2]일 마지막 요소인 1인 들어가는 경우가 몇가지인지 생각해보자
// [1, 3, 1, 2], [3, 1, 2], [1, 2], [2] 총 4가지이다.
// 여기서 알 수 있는 점은 마지막 요소가 들어간 경우의 수는 rt - lt + 1(요소의 갯수)개라는 점이다.

function solution(m, arr) {
  let answer = 0;
  let lt = 0;
  let sum = 0;
  n = arr.length;
  for (let rt = 0; rt < n; rt++) {
    sum += arr[rt];
    while (sum > m) {
      sum -= arr[lt++];
    }
    answer += rt - lt + 1;
  }
  return answer;
}

let a = [1, 3, 1, 2, 3];
console.log(solution(5, a));
